// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define CLASS_DECLARATION(nameofsuperclass, nameofclass) idTypeInfo nameofclass::Type( #nameofclass, #nameofsuperclass, ( idEventFunc<idClass> * )nameofclass::eventCallbacks, nameofclass::CreateInstance, ( void ( idClass::* )( void ) )&nameofclass::Spawn, ( rvStateFunc<idClass> * )nameofclass::stateCallbacks, ( void ( idClass::* )( idSaveGame * ) const )&nameofclass::Save, ( void ( idClass::* )( idRestoreGame * ) )&nameofclass::Restore ); void nameofclass::RegisterClass( void ) { } void Register_##nameofclass( void ) { nameofclass::RegisterClass(); } idClass *nameofclass::CreateInstance( void ) { try { RV_PUSH_SYS_HEAP_ID(RV_HEAP_ID_LEVEL); nameofclass *ptr = new nameofclass; RV_POP_HEAP(); ptr->FindUninitializedMemory(); return ptr; } catch( idAllocError & ) { return NULL; } } idTypeInfo &nameofclass::GetClassType( void ) { return nameofclass::Type; } idTypeInfo *nameofclass::GetType( void ) const { return &nameofclass::Type; } idEventFunc<nameofclass> nameofclass::eventCallbacks[] = {
#define CLASS_DECLARATION(nameofsuperclass, nameofclass) idTypeInfo *nameofclass::Type = NULL; void nameofclass::RegisterClass( void ) { static idTypeInfo type( #nameofclass, #nameofsuperclass, ( idEventFunc<idClass> * )nameofclass::eventCallbacks, nameofclass::CreateInstance, ( void ( idClass::* )( void ) )&nameofclass::Spawn, ( rvStateFunc<idClass> * )nameofclass::stateCallbacks, ( void ( idClass::* )( idSaveGame * ) const )&nameofclass::Save, ( void ( idClass::* )( idRestoreGame * ) )&nameofclass::Restore ); nameofclass::Type = &type; } void Register_##nameofclass( void ) { nameofclass::RegisterClass(); } idClass *nameofclass::CreateInstance( void ) { try { RV_PUSH_SYS_HEAP_ID(RV_HEAP_ID_LEVEL); nameofclass *ptr = new nameofclass; RV_POP_HEAP(); ptr->FindUninitializedMemory(); return ptr; } catch( idAllocError & ) { return NULL; } } idTypeInfo &nameofclass::GetClassType( void ) { return *nameofclass::Type; } idTypeInfo *nameofclass::GetType( void ) const { return nameofclass::Type; } idEventFunc<nameofclass> nameofclass::eventCallbacks[] = {
// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define CLASS_DECLARATION(nameofsuperclass, nameofclass) idTypeInfo nameofclass::Type( #nameofclass, #nameofsuperclass, ( idEventFunc<idClass> * )nameofclass::eventCallbacks, nameofclass::CreateInstance, ( void ( idClass::* )( void ) )&nameofclass::Spawn, ( rvStateFunc<idClass> * )nameofclass::stateCallbacks, ( void ( idClass::* )( idSaveGame * ) const )&nameofclass::Save, ( void ( idClass::* )( idRestoreGame * ) )&nameofclass::Restore ); void nameofclass::RegisterClass( void ) { } void Register_##nameofclass( void ) { nameofclass::RegisterClass(); } idClass *nameofclass::CreateInstance( void ) { try { RV_PUSH_SYS_HEAP_ID(RV_HEAP_ID_LEVEL); nameofclass *ptr = new nameofclass; RV_POP_HEAP(); ptr->FindUninitializedMemory(); return ptr; } catch( idAllocError & ) { return NULL; } } idTypeInfo &nameofclass::GetClassType( void ) { return nameofclass::Type; } idTypeInfo *nameofclass::GetType( void ) const { return &nameofclass::Type; } idEventFunc<nameofclass> nameofclass::eventCallbacks[] = {
#define CLASS_DECLARATION(nameofsuperclass, nameofclass) idTypeInfo *nameofclass::Type = NULL; void nameofclass::RegisterClass( void ) { static idTypeInfo type( #nameofclass, #nameofsuperclass, ( idEventFunc<idClass> * )nameofclass::eventCallbacks, nameofclass::CreateInstance, ( void ( idClass::* )( void ) )&nameofclass::Spawn, ( rvStateFunc<idClass> * )nameofclass::stateCallbacks, ( void ( idClass::* )( idSaveGame * ) const )&nameofclass::Save, ( void ( idClass::* )( idRestoreGame * ) )&nameofclass::Restore ); nameofclass::Type = &type; } void Register_##nameofclass( void ) { nameofclass::RegisterClass(); } idClass *nameofclass::CreateInstance( void ) { try { RV_PUSH_SYS_HEAP_ID(RV_HEAP_ID_LEVEL); nameofclass *ptr = new nameofclass; RV_POP_HEAP(); ptr->FindUninitializedMemory(); return ptr; } catch( idAllocError & ) { return NULL; } } idTypeInfo &nameofclass::GetClassType( void ) { return *nameofclass::Type; } idTypeInfo *nameofclass::GetType( void ) const { return nameofclass::Type; } idEventFunc<nameofclass> nameofclass::eventCallbacks[] = {
